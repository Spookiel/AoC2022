
data = """><<>><<<>><>><<<<>><<>>>><<<<>>><>>><>><><><<<<>><<<>><<<>>>><>>>><<>>>><<>><<<><<<<>>><<<<>>>><<<<>><>>><<<<>><>>><<<>><<>>><<><<<<>><<<>><><>><>>>><<>><<<<><<><<<<><<<><<<>><<<<>><<<<>>><<<>>><<<<>>>><<<<>><<><<<<>>><><<<>>><<<>><<<>>>><<><<>>>><<<<><<>>><<<>><<<<>>><><<><<>><<>>>><>><<<>>>><<>>><>><<<>>><<<<>><<<<>>><<<<>>>><<>>>><>>><<<<>><<<<>>>><<<>><>>>><<>><<>><>><<<<>>><<<>>>><<<>>>><><>>>><<<><<<<>><<<<><<<>>>><<>>>><<<<>><<<<><<><<>>>><<<<>>><<<>>>><<<>>><>>>><<<>><<<<><>>><<<<>><<<<>>><><>>><<>><<<>>><<>>>><>>><<>><<<>>>><<<>><<<>>><><<<<><<<><<<<><<>><<<><<<><<<>><<>>><<>><<<<>>>><>><<<>>>><><<><<<<><<><<<><<>><<<>>>><<<>>>><<<<><>><<<<><<><>><<<<><<>><<<><><<><<>><><<<<><>><<>><<<>><<>>><<>>><><>><>>>><>>><<<<><<<<>><<<>>><<>><<<<>><<><>><<<>><><<<<><>>><<<<>>><>><>>><<><<<<>><<<<>>>><>><<>>>><>>>><<<>>><<<>>>><<<<>><<><<>>><<>><<<<>><>>><<>>><<>>>><<<<>><<<><<<>>><<<<><<<<>><<>>><<<<>>><<<<>>>><<><><<>>>><<<<>>><><><<>><<>>><>>>><>><<<<>><><>>><>><<<>><<>><<<<>><<>>>><><<<<>><<<>>><<><>><>>><<<>><<<<>>><<>>><>>><<<><<<<>><<>>><<>>><<>>><<<<>>>><<<>>><>>><<<>><>>>><<<>>>><<<<><>><<<<>>><<<>><<<<>><<>><<<>>>><<<>><<<<>><<<<><>>>><<<<>><<<<><<<>>><<<<><<<>>><>>><<<>><<>>>><<<><>><>>><<<>><><<<>><<><<<>>><<<<><<<>><<<>>>><>>>><>><<<<>>><<<<>>><>>><<><<<>><<>>><<<>>><<<<>>>><>><<<<>>>><<<>><<<>>>><<>><<<<>>><><<<><<<>>>><>>>><<<><>>><<<<><><<>><<<>>>><<<>>><>>><>>>><<<<>>>><><<<><<>>>><<>>><<<<>>><>>>><<<<>><<<<>>>><<><<<<>><<>><<<><<<<>>>><<<<>>><<<>><<>>>><><<<><<>>><<<<><<<<><>><>>>><<>><<<>>><>><<<>>>><<<>>><<><>><<<>><<<<>>><<<<><><<>>><<<<>>>><<>>>><<>>><<><<>><<>><<>><<<><><<>>>><<<>>>><>>>><<>><<>><<<<>><>>><<<><<>>><>>>><<<>>>><><<<<><<<>>>><<>><<<<>>><<<<><>>><<<><<>>>><<<<>>>><><<<>>><>><<><<>>>><<<>>><>><<<<><<<<>><<>>>><<<>>><><><<<<>>><<<>><<<>>><<>><<<<>>><<<<>>>><>>><>>><<<<>><<>><<<>>><<<<><<><<<<>><>>><<<<>><<<<>><<>><>><<<<>><<<<><>>>><<<><<<>>><><<>><<>><<>>>><<<>>>><<<<><<<<><><<<>>>><<<<><<<<><<><<<>><<<<>>><<<><<>><<<>>><<>>>><<<>><<<<><<<><<<<>>><<<>><<<<>>><<<<>><>>>><>>><<>>><<>><<>><<>><<>>><<<<><<<<>><<<<><<<<>>>><<<>>><>>>><><<>>>><>>><<<>><>>>><<>>><<<<>><<>><<<<>><<>>><<<<><><<>><<>>><<<<>>><<<><<>>><<<>>>><<>><>><<>>>><<<<>>>><><<<<>>>><>>><<>>>><<<<><<><<<<><<<<>><>><<<<><<<>>><<<>><>>><<<<>><<><<<<>>><>>>><<<>>><<<>>><<>>>><<<><>><<<>><<<><>>>><<>><<<<><<<<>>><<<>>>><><><<<>>><><>><<<<>><<><><<>>><>>><<<>>><<>>>><<>><<<>><>>><<>>><<<>><><<<><>><<><<<<><>>>><<<<>>>><>>><<>><<>>><<<<><<>>><<<<>>><<>>><><>>>><>>><>>>><<>><<>>>><>>>><>><<>><<<><<<>>>><<<<><<<<><>><<>>><<<<><<<>><<<><>>><><><<>><<>><>><<>>>><<<<><<><<>>><>><<>>>><<<<>>><<<>><<<>>><<>><<>>>><<<>>>><>>><>><>><<>>><<<<>>><<<<>>><<<><<<<>><<><<<>>><<<<>><<>>>><<<<>>>><<<>>>><<<<>>>><>><<><<>>>><<<<>>><<<<>>>><>>>><<<<><<<><<<<>><>>><>><><<<<>><<<<><<>>>><>>>><<<><<><<>>><<<>>>><<<>>><<<<>>><<>>><>>>><<<<>><<>>><><<<<><<><>>><<<<>>>><>><><<<>>>><>>>><<<<>>><<<>>>><<><>>><>>>><<<><>>>><<<<><<<<>>><>>><<<<>>><<<>>><<>>>><><<>><<<<>>>><<<><>>><>>>><<>>>><<>><<>>><<><<<>>>><<<>>>><<>>>><>>><<<<>>>><<<<>>>><<<<>>><<><<<<><>>>><>><<<><<>><<>><<>>>><<<<>>>><<<><<<>><<<>>><<<>>>><<><<><<<>><<<<>>><<<><<>><<><<>><<>>>><<>>><<<>><<<<><>><<<>>><>>><>><<><><>>><<><>><<<><>>>><<<>>><<<<>>><<<<>>><<><<>>>><>>><<<>>>><<<>><><<<<>><><<>>>><<<<>>><<<><<<<><<<><<>><<<><<<<>>>><><<<>>>><<<<>>>><<<<>>><<>>><<>><<<>>><>>>><><<>><<<<>>>><<>>>><<<>>><<>>><<<>>>><<<>>><<<>>><>>>><<>>><>>>><<<>><<>><<><<<>>><<<><<<<><<>>><<<>>>><<<<>><<>>><<<<>>>><>>><<>><<<<>><<><><<>>><<<<>>><<>><<<>><<>>>><<>><><>>><<<<>>>><>>><<>><>>>><<<<>>>><<<<>>>><><>><<<>>><<<><<><<<><<<<>>>><<><<<>>><>><>>><<<>>>><<<>>><<<>>>><<>>>><>><<<>>>><<><<<>><<<<>>><<><<<>><<<>>>><<<<>>><><<>>>><><>><<<>>><<>><>>>><<<<>><<<>>>><<<>>>><<>><<<<>>><<<>>><<<<>><>>><<<>>><<>><<><<>>><<<><<<<>><<<><<><<<>>>><<<>><>><><<<<>>><<>>><<<>>><<<<>>>><>>><<<>><<<<>><<<<>>>><<<>>>><<>>><<>><<<<>><<<>><<<<>>><<<<>>>><>><<<>>>><>><<<<>><<>><>>>><<<>>><<<<>>>><<>>>><>><>>><><>>><<><<<<>>><<<>>>><<<<>><<>>>><<<>>>><<<>>>><<<<>>><<><<<>>><<<>><<<<>>>><<<>>>><<<<><<<<>>><<<<>><<<>><<><<>>><<<<>>><><<<>><>>>><<<>><<<>><<<>>><>>>><<<<>>><<<>><<>>><<<>>>><<>><<><>>><<<>>>><<<><<><<>><<<>>>><>>>><<<>>><<<<><<<>><<<<>>><<<<>>><<><<>>><<<><<>>>><<<>><<<<>>><<<>>><<><<>>>><>>>><<<>>>><><<<>>><>>>><<>>><>>><<>><<><>>><<>>><>><<<><<<>>>><><<<><<<>>><<>>>><<<><<<<><<<<>>><<<<>>>><>><<<<><<<>>><>>><<><<<<>>><<>><<<<><><<>>><><<><>><<><<<<><<<>>><>>><<<<>><<>><<<><>>>><<<<>>>><<<<>>><><<><<<>>>><<>><<>><>>>><<>>><>>>><<<<>><>>>><>>>><<<<><<<<>><<>>>><<<><<><>>>><<<>>><<<>>><<<><>>>><>>><>>>><<>><<<<>>><<>>>><<>>><<>>><<<><<<><>><<<><>>><<>>>><<>>>><<><<>>><>>>><<<><<<<>>><>><<<<>>><<><<>>>><<<<><<<>>>><<>><<<>>>><>>><<><><<<><<<<>>><<<<>><<<<>><<<<>>><<<>>><<<>>><>><<<><<<><<<>><><<<>>>><<><<<><<<<>>>><>>>><<<><>>>><<<<>><>>>><<>><<>><<<><<<>>>><<<<>>><<<<>>>><>>><<<<>>>><>>><<<<>>>><<<<>>>><>>>><<<<><<<<><<<<>><>>><<<<><>>><<<<>>>><<<<>><<>>><<<<>><<<<><<<<>>>><<<<><<<<>>>><<<<>>>><<<<>>><<><<>>><<<<>>><<<>><<<>>>><<<>><>><<>>>><<<>><<<><<<>>>><<<<>>><<<><<<<>>><<<<>><<>><<>>><<>>>><>>><<><<<>>><<<><<>>><<<>><>><<<><<>>><<<><>>><<<><<><<><<>>><<<<><<<>>><>>><<<>>><<>><<>>><<>><>><<<><<<<><>>>><<<><<><<>>><<<>>>><<<<>>>><<<<><<>>>><<<>>><<<<>>><<<>><<<<>>>><>><><>>>><<>><<<<><<<>>><><>>><><>>><<>><<<<><<>><<<>>><<<><>>>><<<>><<>>>><<<><<>>>><<><<<><<<<>>>><>><<>><<<<>>><<>><<>>>><<<><<<>>><<<>>><<<<>><<<><>><<<<>>>><<<<>><<<<>>>><<<<>>><><<<<>>>><<>><>>><<<<>>><<<<>>>><<>>>><>>>><<>><<<<>><<<<>><<>>>><<<<>>><<>>><<<<>>>><<<<>>>><>><<>>>><<>><><<<<>><<><<<>>><>>><<<<><>>><><<<>>><<><<<>><>><<<<>><><<<<>><<<>><<<<><<<>><>>>><<<>>>><<<>>><<<<>><<<>>><<<><<<><<<>><<<<><<>>>><<<><<>><>>><>>><>><<<>><<<>><<<<>>><<<<>>><<<<><<>><>><<<>>>><<<>>>><>>><>><<<<>>>><<<>>><<<>>>><>><<<<>>><><<<<>>><<><>>><<<<>><>>><<<<>>>><>>><<>>>><<>><>>><<>>><<>><<<><<<<>><>>><<>><<<><><>>>><<>>><<<<>>>><<<><<<<>><>><<<>>><<<>><<<>>>><<<><><<<<>>><<<><<<><<><<>><<>>>><<<<><>>><<<>>>><<<>>>><<<>>>><<<>><>><>>><<<<><<<<>><<<<>>>><>>><<>>>><<<<><<>><>><<><>>>><>>><<<>><<<>><>><<<>><<<><<<<>>>><<<<><<<>><<>><<><<<<><<>>><<<>>>><<<><<<<>><<<><>><<<>>>><<><<>>><<<<>><<<<>>>><>>>><<>>>><<<>>><<><<<>>>><>><<<>>><>><<<>>>><<<<>>>><<<>><>>>><<<<>>><<<<>>><>>><<<>>>><<><<<<><<>>>><>>>><<<>><>><>>><<><><>>><<>>><>>>><<<<>>>><<<<>>><>><<<>><<>><<>><<><<<>>><<<><<<<>>><<<>>>><<>><<<>>>><<>>><<<<>><<>>><<<<><<><><<<<><<<><<<>>>><><<<><>>>><<>>>><<<<>><<<><<>>><<>><<<<>><<<<>><<><>><>>><<<>>>><><<<><<<<>>>><<<<><>>><<><<>>>><>><>>><<<<>>>><>>>><<<<><<>>><>>>><<<<>>>><<<<>>><<<><<<<>>><<<<>>><>>>><>>>><<><<<<><<<>>><><<>>><>>><<<>>><<<>><<>>><<<><<><<<<>>><>>>><<>>>><<<>><<>>>><>>><<><<>><<<>>>><<<><<<<>>>><<<><<>><>>><<>><<<<>><><>>>><<<<>><<>>><<>>>><<><<<<><<>><<><<<<><<<<><<>>>><>><<>>>><>>><<<>>>><<<>><<<>>><<<>><<<<>>><><<><><<<>><<>>><<<>>><>><<><>>><>><<<<>>>><>><<<<>>>><>><<<>>><<>><<>><<>>>><<><<<>>><<<<><>><<<>>>><<>>>><<<<>>><<<<>>>><<<<><<<>>>><<<><<<<><<<<>>>><>><<<>>><<<<><<><<>><<<<>>>><<<<>>>><<<<>>><>>><<>>><>>>><<<<>>>><<>><<><>>>><<>>>><<>><<<<>>>><<<<>>>><<<>>>><<>>><<>>><<<>>>><<>>>><<<><>><<<><<><<>><<<<>>><>>>><<<<>>><><<<>>><<>>>><>>><<>>>><<>>><<>>>><>>><<<<>>><<<><>>><<<<>>>><<<>>><><<<<>><<<<>>><<>>>><<<><><><<<>>><<<>>><>><<<>><<<>>><<<>>>><>>>><<<<>>><>>><<<><>><<>><<<<>>>><<<>><>>><<>>>><<<>>><><<<<>>><<<>>>><>><>>><<><<<>>>><<<<>>><<<>>><<>>><<<>>>><<<<>>><>>>><<<<><<<>>><<<>>>><>><<<>>><<><<<<>><<>><<><<<<><<<><<>>>><<>><<><<<>><<<<>>>><<><<<>>><<<>>><<<<>>><<<<><<<<>><<<><<>>>><<<<>><<<>>><><<>>>><<>>><<<<><<<>><<>><<>><<>><<>>><<<>>>><<>>>><<<>><>>>><<<>><<>>><<<<><<<>>><<<<>><<<>>>><>>>><<<>><<<<><<<>>><>><<<>>>><>><>>><><<<<><<<<>>><<<<>>><<<>>>><<>>>><<<<>>>><<<><<<>>><<>>>><<>>>><<<<>><<>>>><<>>>><<><<<<>>>><>><><<<<>>><<<<>>><<>><<><>>>><<>>>><<<>>><><<>><<>>>><<>>>><<<<>>>><<><<>><<<>><<<><>><>>>><>>><<<>><<<<><<<<><<><<>>>><<<<><>>>><<<<>>><<<<>>>><<<<>>><<<>>><<<<><><<<<>><<<<>>>><<>><>>><<<<><<<>>>><<<>>><>>><<>>>><<<<>>><<>>>><>>>><<<><<<>>>><<>>>><<<<>>><>>><<<><<><><<>><<>>><<><<<<><<>>>><<<><<<><<<>><<<<>><<<>>>><>>><<><<<<>>><>>>><>><<<<>>><<<>>>><>><>><<<><<<<>>><>>>><>>><>><<<<>>><<<<>>>><<>>>><<>>><>>><<><<<>>><<<>><<>>><><>>>><<><>><>><<<><<>>><><<<><<<><>>>><<<>><<>>>><>>><>>>><<<>>>><>>>><<<><<<<>>><<<>><<<>><<<<>><<<>>>><>>>><<<><<<>>><<<<>>>><<>>>><>>><<><<><<<>>>><<><>><>><<<<>><<<><<<>>>><>><>><<<<><<<<><<><<<<>>><<<>><<<><<>>><<>>><<>><<<><<>>>><<><<<<>>>><<<>>>><<>><>>>><<>>>><<<>>>><>>><<<<>>><<<<>>><<<>>><<<>>>><<>>><<>>>><<<><<>>>><<<>>><<<>><>>><<<<>>><<>><<<<>><<<>><<<>>>><<<<>><>>>><>><<<<>>><<>>><><<<<>><<<><<<<><>>><>>>><>><<<>>>><<><<<<>>><>>>><<>>><<<<>><<<><<<>><<<>>><<>>><<<<>>>><<>><>><<<>>><><<>>><>>><<<>><<<><>>><>><<<<><<<>><<<><><<<>>>><<<<>><<>>>><>>>><<>><<<<>><<<><<<><<>>><<<><>><><<<>>><<<<><<<<>>>><<<<><<<>>>><<<><<>>>><<>>>><<<<>><<<><<<<>>><<<<>>><<<>>><>><<>>>><<<><<>><<<<>>>><<<>><>>><<<>>>><<<><<<<><<><<<><><<><<>><<>><<<<><<<<>><<<<>>><><<<<><>><<>><>>><>>>><<<>>><<<>>><<<>>><<<><<<>>>><>>>><<<>><<<>><><<<>>>><<<<>>><<>><<<<>>><<>>><<><>>><<<<><<<>><>>><<>>>><>>><<<<><<<>>><<><<>><<>><<<>><<<<>><<>><>><<>>><><>>><<<>>>><<<>>>><<<<>><<<>>><<>>><<<>>>><<<>>><><<<>><><<>>><<<>>><<<><>>>><>>>><<<>><<<<><><<>><<>>>><><<<<>>>><<<<>>>><<<<>><<<><>>><<<<>>><<<<>>><>><<><>>>><>><<>>>><>>>><<<<>><<<>><><<<>>><><><<<>>>><<<><<>><<>>>><<<<>><<<>>><<>>>><<<<>><<<<>><<>>>><<>>><>><<>><<<<>><<>>>><<><><<<>>><<>><<>>><<<>>><<<>>><<<><<<<>>>><<<<>><<<>><>>><<<<>><><<<<>>><<>>>><<<>>>><<>>>><<<>>>><><<<>>><<<<>>><<>><<<<>>>><<<<>>><<<<>>><<<<>>><>>>><<<>><<<>>>><<<>>>><>><<<<>>>><>>>><>><<<>>>><<<>>>><>>><<><<<<>>>><><<<<>><<<>>>><<<><<<>>><<><<<><<>><<<<>><<<>>><>><<<>>><>>>><>>><<<<>>>><><>><<<>>><<<><<<<>>><><<<><<>><>>>><>>><<<>>>><<<<>>>><<<<>>><<>>><<>>><<<>><<<>>>><<<>>>><><<>><<<><>><<<>>><<<>><<<<><<>>><>>><<>>><<>><>>>><<>><><>>>><<><>><>>><<>>><<<<>><<<>><<>><<><<<<>>><>>><>>>><>>><>>>><<<<>>>><<>>><<<<>>>><<<>><<>><<<>><<<<>>><<>><<>>><<<<>>><>>>><<>>>><<>><<>>><<<>>>><><<<<>>>><<<>>><<><<<<>>>><<><<<<>>>><<>><<<<><>><<>>><<<>>><<>><<<<><<>><<><<<<><"""


test = """>>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>"""

from copy import deepcopy
class Block:
    def __init__(self):
        self.coords = []
        self.last = []
        self.t = 0
        self.locked = 0
        self.size = 0

    def shiftR(self):

        self.last = deepcopy(self.coords)

        for i in range(len(self.coords)):
            self.coords[i][0] += 1





    def shiftL(self):
        self.last = deepcopy(self.coords)
        for i in range(len(self.coords)):
            self.coords[i][0] -= 1



    def moveDown(self):
        self.last = deepcopy(self.coords)

        for i in range(len(self.coords)):
            self.coords[i][1] -= 1



    def lockIn(self, d,lmy):
        self.locked = 1

        for (x,y) in self.coords:
            if y > lmy:
                lmy = y
            d[(x, y)] = 1
        return d, lmy


    def isBlocked(self, d):


        for x,y in self.coords:
            if d[(x,y)] == 1 or x < 0 or x > 6 or y < 0:
                return True
        return False



    def move(self, inst, d, lmy):
        if self.t == 0:
            if inst == ">":
                self.shiftR()
            elif inst == "<":
                self.shiftL()

            if not self.isBlocked(d):
                pass
                #print("SUCCESS")
                #return None
            ### Failed so undo
            else:
                #print("FAILED TO SHIFT", self.coords, self.last)
                self.coords = deepcopy(self.last)
                #return None
            self.t = 1 - self.t
        else:
            self.moveDown()


            if not self.isBlocked(d):
                #print("SUCCESS")
                self.t = 1 - self.t
            else:
                self.coords = self.last
                self.t = 1-self.t
                return self.lockIn(d, lmy)








class HLine(Block):
    def __init__(self, sy, sx):

        super().__init__()
        self.sy = sy
        self.sx = sx
        ### Measure from left
        self.coords = [(sx+i,sy) for i in range(4)]
        self.coords = list(map(list, self.coords))

        self.size = 4
class VLine(Block):
    def __init__(self, sy,sx):
        super().__init__()

        self.sy = sy
        self.sx = sx
        ### Measure from bottom
        self.coords = [(sx,sy+i) for i in range(4)]
        self.size = 4
        self.coords = list(map(list, self.coords))

class LShape(Block):
    def __init__(self,sy,sx):
        super().__init__()
        self.sy = sy
        self.sx = sx
        ### Measure from left
        self.coords = [(sx+i,sy) for i in range(3)]
        self.coords.append((sx+2, sy+1))
        self.coords.append((sx + 2, sy + 2))
        self.coords = list(map(list, self.coords))
        self.size = 5
class Plus(Block):
    def __init__(self,sy,sx):
        super().__init__()
        self.sy = sy
        self.sx = sx
        ### Measure from bottom
        self.coords = [(sx+i,sy+1) for i in range(-1,2)]
        self.coords.append((sx,sy))
        self.coords.append((sx, sy+2))
        self.coords = list(map(list, self.coords))
        self.size = 5

class Square(Block):
    def __init__(self, sy,sx):
        super().__init__()
        self.sy = sy
        self.sx = sx
        ### Measure from bottom left
        self.coords = [(sx+i,sy+j) for i in range(2) for j in range(2)]

        self.coords = list(map(list, self.coords))

        self.size = 4

from collections import defaultdict
def solve(data):
    blocks = [HLine, Plus, LShape, VLine, Square]

    d = defaultdict(int)


    ### For each column, keep track of distance to highest point
    pos = 0
    t = 0
    lmy = 0
    for i in range(len(data)):

        if i%5 != 1:
            nblock = blocks[i%5](lmy+3, 2)
        else:
            nblock = Plus(lmy+3, 3)
        print("SPAWNING", nblock, nblock.sx, nblock.sy, lmy)
        #print("INITIAL COORDS", nblock.coords)
        while not nblock.locked:
            res = nblock.move(data[pos], d, lmy)
            print(nblock.coords, "HERE", data[pos], nblock.t, pos)
            for y in range(10, -1, -1):
                for x in range(7):
                    if d[(x, y)]:

                        print("#", end="")
                    else:
                        if [x, y] in nblock.coords:
                            print("@", end="")
                        else:
                            print(".", end="")

                print("", y + 1)
            print("--------\n")



            if nblock.t == 1:
                pos += 1
                pos %= len(data)
            if not res:
                continue
            else:
                d, lmy = res
                lmy += 1
                break




        input()

        lmy = 0
        for k, v in d.items():
            if v == 1:
                lmy = max(k[1], lmy)

        lmy += 1
        print(lmy)

        ### Need to check if I have a horizontal line


        print(lmy, i)


    b = 0
    for k,v in d.items():
        if v == 1:
            b = max(k[1], b)
    print(b+1)
    b += 1

    print(lmy-1)


def solve2(data):
    print(len(data))
    input()
    blocks = [HLine, Plus, LShape, VLine, Square]

    d = defaultdict(int)

    ulim = 4439999999556
    llim = 0
    ### For each column, keep track of distance to highest point
    pos = 0
    t = 0
    lmy = 0

    cheights = [0] * 7
    totsize = 0

    seen = {} ### (i%5, tuple(cdepths)) = (lmy, i)
    got = []

    found = 0
    vals = []
    for i in range(1000000):

        if found and len(vals) < found:
            vals.append(lmy-cyc_start_height)
            print(vals)
            if left < len(vals):
                ans += vals[left]
                print(ans)
                #input()
        if i % 5 != 1:
            nblock = blocks[i % 5](lmy + 3, 2)
        else:
            nblock = Plus(lmy + 3, 3)
        totsize += nblock.size
        # print("SPAWNING", nblock, nblock.sx, nblock.sy, lmy)
        # print("INITIAL COORDS", nblock.coords)
        while not nblock.locked:
            res = nblock.move(data[pos], d, lmy)
            # print(nblock.coords, "HERE", data[pos], nblock.t, pos)

            if nblock.t == 1:
                pos += 1
                pos %= len(data)
            if not res:
                continue
            else:
                d, lmy = res
                lmy += 1
                break



        lmy = 0
        for k, v in d.items():
            if v == 1:
                lmy = max(k[1], lmy)

        ###Calculate states here

        for x,y in nblock.coords:
            #print(x,y, "adding")
            cheights[x] = max(cheights[x], y+1)
        lmy += 1
        depths = [lmy-depth for depth in cheights]


        ### Need to check if I have a horizontal line
        nk = (i%5, tuple(depths))

        if nk in seen:
            cyc_info = seen[nk]
            cyc_len = i- cyc_info[1]
            cyc_height = lmy - cyc_info[0]
            if not found:

                cyc_start_height = lmy


                found = cyc_len

            full = (1000000000000 - i) // cyc_len
            left = (1000000000000 - i) % cyc_len
            ans = full*cyc_height + lmy
            #print(vals)
            got.append(ans)
            if left == 0:
                print("FOUND CYCLE", cyc_info, ans, left)
                print("ANSWER: ", ans-1)
                #print(sorted(got))

                print(len(got), set(got))
                input()

        else:
            seen[nk] = (lmy, i)
        #print(lmy, i, depths, cheights)


    b = 0
    for k, v in d.items():
        if v == 1:
            b = max(k[1], b)
    print(b + 1)
    b += 1

    print(lmy - 1)
solve2(data)

## 3265 too high
## 3153 too low

#1514285714288
#1514285714263

### 4439999999556 too high
### 1599999999991 too high
### 1584927536248 too high
### 7099999999574
